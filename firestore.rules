rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Function to check if a user has a specific role
    function hasRole(role) {
      // Check if the user is authenticated and their role matches
      return request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == role;
    }

    // Function to check if a user is the owner of a document
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }

    // Users: Can only read their own data, Admins can read anyone's data
    match /users/{userId} {
      allow read: if isOwner(userId) || hasRole('admin');
      allow write: if isOwner(userId) || hasRole('admin');
    }

    // Invitation Codes: Only admins can create/read them
    match /invitationCodes/{codeId} {
      allow read, write: if hasRole('admin');
    }

    // Students: Teachers can read students assigned to them, parents can read their children
    // (We will build this rule in more detail later)
    match /students/{studentId} {
        // Placeholder rule: For now, only authenticated users can read/write.
        // We will make this much more specific.
        allow read, write: if request.auth != null;
    }
    
    // Default deny: block access to all other collections
    match /{document=**} {
      allow read, write: if false;
    }
  }
}